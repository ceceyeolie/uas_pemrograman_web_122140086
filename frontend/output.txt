// --- ./src\App.jsx ---
// 1. Update src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Provider } from 'react-redux';
import store from './store';
import Layout from './components/Layout';
import HomePage from './pages/HomePage';
import ArticleDetailPage from './pages/ArticleDetailPage';
import LoginPage from './pages/LoginPage';
import AdminDashboard from './pages/auth/AdminDashboard';
import AdminArticleListPage from './pages/auth/ArticleListPage'; // New
import AdminCategoryListPage from './pages/auth/CategoryListPage'; // New
import ArticleFormPage from './pages/auth/ArticleFormPage';
import CategoryFormPage from './pages/auth/CategoryFormPage';
import PrivateRoute from './components/PrivateRoute';
import { ToastContainer } from 'react-toastify'; // New
import 'react-toastify/dist/ReactToastify.css'; // New

function App() {
  return (
    <Provider store={store}>
      <Router>
        <Routes>
          <Route path="/" element={<Layout />}>
            {/* Public Routes */}
            <Route index element={<HomePage />} />
            <Route path="artikel/:id" element={<ArticleDetailPage />} />
            <Route path="login" element={<LoginPage />} />
            {/* Admin Routes */}
            <Route path="admin" element={
              <PrivateRoute>
                <AdminDashboard />
              </PrivateRoute>
            } />
            <Route path="admin/artikel/" element={
              <PrivateRoute>
                <AdminArticleListPage /> {/* Changed */}
              </PrivateRoute>
            } />
            <Route path="admin/artikel/new" element={
              <PrivateRoute>
                <ArticleFormPage />
              </PrivateRoute>
            } />
            <Route path="admin/artikel/:id/edit" element={
              <PrivateRoute>
                <ArticleFormPage />
              </PrivateRoute>
            } />
            <Route path="admin/kategori/" element={
              <PrivateRoute>
                <AdminCategoryListPage /> {/* Changed */}
              </PrivateRoute>
            } />
            <Route path="admin/kategori/new" element={
              <PrivateRoute>
                <CategoryFormPage />
              </PrivateRoute>
            } />
            <Route path="admin/kategori/:id/edit" element={
              <PrivateRoute>
                <CategoryFormPage />
              </PrivateRoute>
            } />
            {/* Catch-all route */}
            <Route path="*" element={<div>Page Not Found</div>} />
          </Route>
        </Routes>
        <ToastContainer /> {/* New */}
      </Router>
    </Provider>
  );
}

export default App;

// --- ./src\main.jsx ---
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


// --- ./src\api\artikelApi.js ---
const API_BASE_URL = 'http://localhost:6543/api/v1';

export const artikelApi = {
  async getAll(params = {}) {
    const url = new URL(`${API_BASE_URL}/artikel`);
    Object.entries(params).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        url.searchParams.append(key, value);
      }
    });

    const response = await fetch(url.toString(), {
      credentials: 'include',
    });

    if (!response.ok) throw new Error('Failed to fetch articles');
    return response.json();
  },
  
  async getById(id) {
    const response = await fetch(`${API_BASE_URL}/artikel/${id}`);
    if (!response.ok) throw new Error('Article not found');
    return response.json();
  },

  async create(data) {
    const response = await fetch(`${API_BASE_URL}/artikel`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    
    if (!response.ok) throw new Error('Failed to create article');
    return response.json();
  },

  async update(id, data) {
    const response = await fetch(`${API_BASE_URL}/artikel/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    
    if (!response.ok) throw new Error('Failed to update article');
    return response.json();
  },

async delete(id) {
    const response = await fetch(`${API_BASE_URL}/artikel/${id}`, {
      method: 'DELETE'
    });
    if (response.status === 204) return; // Handle 204 No Content
    if (!response.ok) throw new Error('Failed to delete article');
    return response.json();
  },

  async search(query) {
    const url = new URL(`${API_BASE_URL}/artikel`);
    if (query) url.searchParams.append('q', query);
    
    const response = await fetch(url.toString());
    if (!response.ok) throw new Error('Failed to search articles');
    return response.json();
  }
};

// --- ./src\api\authApi.js ---
// src/api/authApi.js
const API_BASE_URL = 'http://localhost:6543/api/v1';

export const authApi = {
  async login(credentials) {
    const response = await fetch(`${API_BASE_URL}/login`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(credentials),
      credentials: 'include' // ✅ Add this
    });
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Invalid email or password. Please try again.');
    }
    const data = await response.json();
    return data;
  }
};

// --- ./src\api\kategoriApi.js ---
// src/api/kategoriApi.js
const API_BASE_URL = 'http://localhost:6543/api/v1';

export const kategoriApi = {
  async getAll() {
    const response = await fetch(`${API_BASE_URL}/kategori`);
    if (!response.ok) throw new Error('Failed to fetch categories');
    return response.json();
  },
  
  async getById(id) {
    const response = await fetch(`${API_BASE_URL}/kategori/${id}`);
    if (!response.ok) throw new Error(`Failed to fetch category ${id}`);
    return response.json();
  },
  
  async create(category) {
    const response = await fetch(`${API_BASE_URL}/kategori`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(category)
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.errors || 'Failed to create category');
    }
    
    return response.json();
  },
  
  async update(id, categoryUpdate) {
    const response = await fetch(`${API_BASE_URL}/kategori/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(categoryUpdate)
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.errors || `Failed to update category ${id}`);
    }
    
    return response.json();
  },
  
  async delete(id) {
    const response = await fetch(`${API_BASE_URL}/kategori/${id}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.errors || `Failed to delete category ${id}`);
    }
  }
};

// --- ./src\components\ArticleCard.jsx ---
import { Link } from 'react-router-dom';

export default function ArticleCard({ article }) {
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      <div className="p-4">
        <span className="text-sm text-gray-500">{article.penulis}</span>
        <h3 className="font-bold text-lg mt-1">{article.judul}</h3>
        <p className="text-gray-600 mt-2 line-clamp-3">
          {article.konten}
        </p>
        <div className="mt-3 flex justify-between items-center">
          <Link to={`/artikel/${article.id}`} className="text-blue-600 hover:underline">
            Read more
          </Link>
          <span className={`text-xs px-2 py-1 rounded ${
            article.status === 'published' 
              ? 'bg-green-100 text-green-800' 
              : 'bg-yellow-100 text-yellow-800'
          }`}>
            {article.status}
          </span>
        </div>
      </div>
    </div>
  );
}

// --- ./src\components\FilterByCategory.jsx ---
// src/components/FilterByCategory.jsx
import { useState } from 'react';
export default function FilterByCategory({ categories, activeCategory, onSelectCategory }) {
  const handleChange = (e) => {
    const categoryId = e.target.value === "" ? "" : Number(e.target.value);
    onSelectCategory(categoryId); // Ensure backend expects number for kategori_id
  };
  return (
    <select 
      value={activeCategory}
      onChange={handleChange}
      className="w-full p-2 border border-gray-300 rounded-md"
    >
      <option value="">All Categories</option>
      {categories.map(category => (
        <option key={category.id} value={category.id}>
          {category.nama}
        </option>
      ))}
    </select>
  );
}

// --- ./src\components\Header.jsx ---
// src/components/Header.jsx
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { logout } from '../store/authSlice';

export default function Header() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const { isAuthenticated, user } = useSelector(state => state.auth);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  
  const handleLogout = () => {
    dispatch(logout());
    navigate('/');
  };
  
  return (
    <header className="bg-black shadow">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center">
          <Link to="/" className="text-2xl font-bold text-white">Portal Berita</Link>
          
          {/* Mobile menu button */}
          <div className="md:hidden">
            <button 
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              className="text-gray-700 hover:text-blue-600 p-2"
              aria-label="Toggle menu"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                {mobileMenuOpen ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                )}
              </svg>
            </button>
          </div>
          
          {/* Desktop navigation */}
          <nav className="hidden py-5 md:block">
            <div className="flex items-center space-x-6">
              <Link to="/" className="text-white hover:text-blue-600 font-medium">
                Home
              </Link>
              
              {isAuthenticated ? (
                <>
                  <Link to="/admin" className="text-white hover:text-blue-600 font-medium">
                    Dashboard
                  </Link>
                  <div className="flex items-center space-x-6">
                    <span className="text-white">
                      Hello, {user?.username || 'Admin'}
                    </span>
                    <button
                      onClick={handleLogout}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
                    >
                      Logout
                    </button>
                  </div>
                </>
              ) : (
                <Link to="/login" className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
                  Login
                </Link>
              )}
            </div>
          </nav>
        </div>
        
        {/* Mobile navigation */}
        {mobileMenuOpen && (
          <nav className="mt-4 pt-4 border-t border-gray-200 md:hidden">
            <div className="flex flex-col space-y-4">
              <Link 
                to="/" 
                className="text-gray-700 hover:text-blue-600 py-2 font-medium"
                onClick={() => setMobileMenuOpen(false)}
              >
                Home
              </Link>
              
              {isAuthenticated ? (
                <>
                  <Link 
                    to="/admin" 
                    className="text-gray-700 hover:text-blue-600 py-2 font-medium"
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    Admin Dashboard
                  </Link>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-700">
                      Hello, {user?.username || 'Admin'}
                    </span>
                    <button
                      onClick={() => {
                        handleLogout();
                        setMobileMenuOpen(false);
                      }}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm"
                    >
                      Logout
                    </button>
                  </div>
                </>
              ) : (
                <Link 
                  to="/login" 
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded inline-block"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  Login
                </Link>
              )}
            </div>
          </nav>
        )}
      </div>
    </header>
  );
}

// --- ./src\components\Layout.jsx ---
// src/components/Layout.jsx
import React from 'react';
import { Outlet } from 'react-router-dom';
import Header from './Header';

export default function Layout() {
  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      <Header />
      <main className="flex-grow py-6">
        <div className="container mx-auto px-4">
          <Outlet />
        </div>
      </main>
      <footer className="bg-black text-white py-6">
        <div className="container mx-auto px-4 text-center">
          <p>© {new Date().getFullYear()} Portal Berita. All rights reserved.</p>
        </div>
      </footer>
    </div>
  );
}

// --- ./src\components\PrivateRoute.jsx ---
// src/components/PrivateRoute.jsx
import { useSelector } from 'react-redux';
import { Navigate } from 'react-router-dom';

export default function PrivateRoute({ children }) {
  const { isAuthenticated } = useSelector(state => state.auth);
  
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }
  
  return children;
}

// --- ./src\components\SearchBar.jsx ---
import { useState } from 'react';

export default function SearchBar({ onSearch }) {
  const [searchTerm, setSearchTerm] = useState('');
  
  const handleSubmit = (e) => {
    e.preventDefault();
    onSearch(searchTerm);
  };

  return (
    <form onSubmit={handleSubmit} className="relative">
      <input
        type="text"
        placeholder="Search articles..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="w-full p-3 pl-4 pr-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <button 
        type="submit"
        className="absolute right-3 top-2.5 text-gray-500"
      >
        🔍
      </button>
    </form>
  );
}

// --- ./src\pages\ArticleDetailPage.jsx ---
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { artikelApi } from '../api/artikelApi';
import { useSelector } from 'react-redux';

const ArticleDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { isAuthenticated } = useSelector(state => state.auth);
  const [article, setArticle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchArticle = async () => {
      try {
        const data = await artikelApi.getById(id);
        setArticle(data);
        setLoading(false);
      } catch (err) {
        setError(err.message || 'Failed to load article');
        setLoading(false);
      }
    };
    fetchArticle();
  }, [id]);

  // Hide drafts for non-admin users
  useEffect(() => {
    if (article && article.status === 'draft' && !isAuthenticated) {
      navigate('/');
      setError('Article not found');
    }
  }, [article, isAuthenticated, navigate]);

  // Function to format content with proper paragraph breaks
  const formatContent = (content) => {
    if (!content) return '';
    
    // Split by paragraphs and render them properly
    return content.split('\n\n').map((paragraph, index) => (
      <p key={index} className="mb-4">
        {paragraph.split('\n').map((line, i) => (
          <React.Fragment key={i}>
            {line}
            {i < paragraph.split('\n').length - 1 && <br />}
          </React.Fragment>
        ))}
      </p>
    ));
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div className="text-red-500 p-4">{error}</div>;
  if (!article) return <div>Article not found</div>;

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white rounded-lg shadow-md overflow-hidden">
        <div className="p-6">
          <h1 className="text-3xl font-bold mb-4">{article.judul}</h1>
          <div className="flex items-center text-gray-600 mb-4">
            <span>{article.penulis}</span>
            <span className="mx-2">•</span>
            <span>{new Date(article.tanggal_publikasi).toLocaleDateString()}</span>
          </div>
          
          <div className="prose max-w-none mb-6 leading-relaxed">
            {formatContent(article.konten)}
          </div>
          
          <div className="flex justify-between items-center">
            <Link 
              to="/" 
              className="text-blue-600 hover:text-blue-800"
            >
              ← Back to Home
            </Link>
            <div className={`px-4 py-1 rounded-full text-sm ${
              article.status === 'published' 
                ? 'bg-green-100 text-green-800' 
                : 'bg-yellow-100 text-yellow-800'
            }`}>
              {article.status}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ArticleDetailPage;

// --- ./src\pages\HomePage.jsx ---
// 4. Update src/pages/HomePage.jsx
import React, { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import ArticleCard from '../components/ArticleCard';
import SearchBar from '../components/SearchBar';
import FilterByCategory from '../components/FilterByCategory';
import { kategoriApi } from '../api/kategoriApi';
import { artikelApi } from '../api/artikelApi';

const HomePage = () => {
  const [articles, setArticles] = useState([]);
  const [categories, setCategories] = useState([]);
  const [activeCategory, setActiveCategory] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(true);

// src/pages/HomePage.jsx
useEffect(() => {
  const fetchData = async () => {
    setLoading(true);
    const params = { status: 'published' }; // ✅ Explicitly set to 'published'
    if (activeCategory) params.kategori_id = activeCategory;
    if (searchQuery) params.q = searchQuery;

    try {
      const [articlesData, categoriesData] = await Promise.all([
        artikelApi.getAll(params),
        kategoriApi.getAll()
      ]);
      setArticles(articlesData);
      setCategories(categoriesData);
    } catch (err) {
      console.error('Failed to fetch data:', err);
    } finally {
      setLoading(false);
    }
  };
  fetchData();
}, [activeCategory, searchQuery]);

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <SearchBar onSearch={setSearchQuery} />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
        <div className="md:col-span-1">
          <h2 className="text-xl font-bold mb-4">Categories</h2>
          <FilterByCategory 
            categories={categories}
            activeCategory={activeCategory}
            onSelectCategory={setActiveCategory}
          />
        </div>
        <div className="md:col-span-3">
          <h1 className="text-2xl font-bold mb-6">Latest News</h1>
          {loading ? (
            <div className="text-center py-10">Loading articles...</div>
          ) : articles.length === 0 ? (
            <div className="text-center py-10 text-gray-500">
              {searchQuery ? 'No articles found matching your search' : 'No articles available'}
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {articles.map(article => (
                <ArticleCard key={article.id} article={article} />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default HomePage;

// --- ./src\pages\LoginPage.jsx ---
// src/pages/LoginPage.jsx
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, useLocation } from 'react-router-dom';
import { loginRequest, loginSuccess, loginFailure } from '../store/authSlice';
import { authApi } from '../api/authApi';

export default function LoginPage() {
  const [formData, setFormData] = useState({ username: '', password: '' });
  const { loading, error } = useSelector(state => state.auth);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();
  
  // Get redirect path from location state or default to admin dashboard
  const from = location.state?.from?.pathname || '/admin';

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      dispatch(loginRequest());
      
      // Use real API call
      const response = await authApi.login(formData);
      
      // Dispatch success with the response data
      dispatch(loginSuccess(response));
      
      // Redirect to protected page
      navigate(from, { replace: true });
      
    } catch (err) {
      // Dispatch failure with error message
      dispatch(loginFailure(err.message));
    }
  };

  return (
    <div className="max-w-md mx-auto my-18 bg-white p-8 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">Admin Login</h2>
      
      {error && (
        <div className="bg-red-100 text-red-700 p-3 mb-4 rounded">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-gray-700 text-sm font-medium mb-2" htmlFor="username">
            Username
          </label>
          <input
            id="username"
            type="text"
            name="username"
            value={formData.username}
            onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        
        <div>
          <label className="block text-gray-700 text-sm font-medium mb-2" htmlFor="password">
            Password
          </label>
          <input
            id="password"
            type="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
        </div>
        
        <button
          type="submit"
          disabled={loading}
          className={`w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md font-medium ${
            loading ? 'opacity-70 cursor-not-allowed' : ''
          }`}
        >
          {loading ? 'Logging in...' : 'Login'}
        </button>
      </form>
      
      <div className="mt-4 text-center text-sm text-gray-600">
      </div>
    </div>
  );
}

// --- ./src\pages\auth\AdminDashboard.jsx ---
import { Link } from 'react-router-dom';

export default function AdminDashboard() {
  return (
    <div className="container mx-auto p-4">
      <div className="flex flex-col md:flex-row gap-4">
        <div className="md:w-1/3">
          <div className="bg-white p-6 rounded shadow">
            <h2 className="text-xl font-bold mb-4">Articles</h2>
            <div className="space-y-2">
              <Link to="/admin/artikel" className="block text-blue-600">
                Manage Articles
              </Link>
              <Link to="/admin/artikel/new" className="block text-blue-600">
                Create New Article
              </Link>
            </div>
          </div>
        </div>
        
        <div className="md:w-1/3">
          <div className="bg-white p-6 rounded shadow">
            <h2 className="text-xl font-bold mb-4">Categories</h2>
            <div className="space-y-2">
              <Link to="/admin/kategori" className="block text-blue-600">
                Manage Categories
              </Link>
              <Link to="/admin/kategori/new" className="block text-blue-600">
                Create New Category
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// --- ./src\pages\auth\ArticleFormPage.jsx ---
import { useParams, useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { artikelApi } from '../../api/artikelApi';
import { kategoriApi } from '../../api/kategoriApi';

export default function ArticleFormPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    judul: '',
    konten: '',
    penulis: '', 
    kategori_id: '',
    status: 'draft',
    tanggal_publikasi: new Date().toISOString().split('T')[0]
  });
  const [errors, setErrors] = useState({});
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      if (id) {
        const article = await artikelApi.getById(id);
        setFormData(article);
      }
      
      const kategoriList = await kategoriApi.getAll();
      setCategories(kategoriList);
    };
    
    fetchData();
  }, [id]);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    // Exclude non-editable fields before sending
    const dataToSend = {
      judul: formData.judul,
      konten: formData.konten,
      penulis: formData.penulis,
      kategori_id: formData.kategori_id,
      status: formData.status,
      tanggal_publikasi: formData.tanggal_publikasi,
    };

    if (id) {
      await artikelApi.update(id, dataToSend); // Use filtered data
    } else {
      await artikelApi.create(dataToSend); // Use filtered data
    }
    navigate('/admin/artikel');
  } catch (error) {
    setErrors({ form: error.message });
  }
};

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">
        {id ? 'Edit' : 'Create'} Article
      </h1>
      
      {errors.form && (
        <div className="bg-red-100 text-red-700 p-3 mb-4 rounded">
          {errors.form}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4 max-w-2xl">
        {/* Form fields */}
        <div className="mb-4">
          <label className="block text-gray-700 mb-2" htmlFor="judul">Title*</label>
          <input
            type="text"
            id="judul"
            name="judul"
            value={formData.judul}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>
        
        <div className="mb-4">
          <label className="block text-gray-700 mb-2" htmlFor="konten">Content*</label>
          <textarea
            id="konten"
            name="konten"
            value={formData.konten}
            onChange={handleChange}
            rows={6}
            className="w-full p-2 border rounded"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 mb-2" htmlFor="penulis">Penulis*</label>
          <input
            type="text"
            id="penulis"
            name="penulis"
            value={formData.penulis}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 mb-2" htmlFor="kategori_id">Category*</label>
          <select
            id="kategori_id"
            name="kategori_id"
            value={formData.kategori_id}
            onChange={handleChange}
            className="w-full p-2 border rounded"
            required
          >
            <option value="">Select a category</option>
            {categories.map(category => (
              <option key={category.id} value={category.id}>
                {category.nama}
              </option>
            ))}
          </select>
        </div>
        
        <div className="mb-4">
          <label className="block text-gray-700 mb-2" htmlFor="status">Status</label>
          <select
            id="status"
            name="status"
            value={formData.status}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          >
            <option value="draft">Draft</option>
            <option value="published">Published</option>
          </select>
        </div>
        
        <div className="mb-4">
          <label className="block text-gray-700 mb-2" htmlFor="tanggal_publikasi">Publication Date</label>
          <input
            type="date"
            id="tanggal_publikasi"
            name="tanggal_publikasi"
            value={formData.tanggal_publikasi}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          />
        </div>
        
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
          Save
        </button>
      </form>
    </div>
  );
}

// --- ./src\pages\auth\ArticleListPage.jsx ---
// src/pages/ArticleListPage.jsx
import { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { artikelApi } from '../../api/artikelApi';
import { toast } from 'react-toastify'; // Add notification library

const ArticleListPage = () => {
  const [articles, setArticles] = useState([]);
  const navigate = useNavigate();

useEffect(() => {
  const fetchArticles = async () => {
    try {
      const data = await artikelApi.getAll(); // ✅ No status filter needed
      setArticles(data);
    } catch (error) {
      toast.error('Failed to load articles');
    }
  };
  fetchArticles();
}, []);

  const handleDelete = async (id) => {
    try {
      await artikelApi.delete(id);
      setArticles(articles.filter(article => article.id !== id));
      toast.success('Article deleted');
    } catch (error) {
      toast.error('Delete failed');
    }
  };

  return (
    <div className="container mx-auto p-8">
      <h1 className="text-2xl font-bold mb-6">Manage Articles</h1>
      <button 
        type="button"
        onClick={() => navigate('/admin/artikel/new')}
        className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded mb-4"
      >
        Create New Article
      </button>
      <table className="w-full text-left border-collapse">
        <thead>
          <tr className="bg-gray-100">
            <th className="px-4 py-3">Title</th>
            <th className="px-4 py-3">Author</th>
            <th className="px-4 py-3">Status</th>
            <th className="px-4 py-3">Actions</th>
          </tr>
        </thead>
        <tbody>
          {articles.map(article => (
            <tr key={article.id} className="border-b">
              <td className="px-4 py-3">
                <Link to={`/admin/artikel/${article.id}/edit`} className="text-blue-600 hover:underline">
                  {article.judul}
                </Link>
              </td>
              <td className="px-4 py-3">{article.penulis}</td>
              <td className="px-4 py-3">
                <span 
                  className={`px-2 py-1 rounded text-sm ${article.status === 'published' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}
                >
                  {article.status}
                </span>
              </td>
              <td className="px-4 py-3">
                <button 
                  onClick={() => handleDelete(article.id)}
                  className="text-red-600 hover:underline"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ArticleListPage;

// --- ./src\pages\auth\CategoryFormPage.jsx ---
// src/pages/CategoryFormPage.jsx
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { kategoriApi } from '../../api/kategoriApi';

const CategoryFormPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const isEdit = Boolean(id);
  const [formData, setFormData] = useState({
    nama: '',
    deskripsi: ''
  });
  const [loading, setLoading] = useState(isEdit);
  const [submitting, setSubmitting] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const fetchCategory = async () => {
      try {
        const data = await kategoriApi.getById(id);
        setFormData(data);
        setLoading(false);
      } catch (err) {
        console.error(err);
        setLoading(false);
      }
    };
    
    if (isEdit) fetchCategory();
  }, [id, isEdit]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear validation errors on edit
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const validate = () => {
    const validationErrors = {};
    
    if (!formData.nama) {
      validationErrors.nama = 'Category name is required';
    } else if (formData.nama.length < 2) {
      validationErrors.nama = 'Name must be at least 2 characters';
    } else if (formData.nama.length > 100) {
      validationErrors.nama = 'Name must be at most 100 characters';
    }
    
    if (formData.deskripsi && formData.deskripsi.length > 500) {
      validationErrors.deskripsi = 'Description must be at most 500 characters';
    }
    
    setErrors(validationErrors);
    return Object.keys(validationErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Validate form
      if (!validate()) return;

      const dataToSend = {
        nama: formData.nama,
        deskripsi: formData.deskripsi,
      };

      setSubmitting(true);
      if (id) {
        await kategoriApi.update(id, dataToSend);
      } else {
        await kategoriApi.create(dataToSend);
      }
      navigate("/admin/kategori");
    } catch (error) {
      setErrors({ form: error.message });
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) return <div>Loading...</div>;

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">
        {isEdit ? 'Edit' : 'Create'} Category
      </h1>
      
      {errors.form && (
        <div className="bg-red-100 text-red-700 p-3 rounded mb-4">
          {errors.form}
        </div>
      )}
      
      <div className="max-w-2xl bg-white p-6 rounded-lg shadow-md">
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="nama">
              Category Name*
            </label>
            <input
              id="nama"
              name="nama"
              type="text"
              value={formData.nama}
              onChange={handleChange}
              className={`w-full p-3 border rounded ${errors.nama ? 'border-red-500' : 'border-gray-300'}`}
            />
            {errors.nama && (
              <p className="text-red-500 text-sm mt-1">{errors.nama}</p>
            )}
          </div>
          
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="deskripsi">
              Description
            </label>
            <textarea
              id="deskripsi"
              name="deskripsi"
              value={formData.deskripsi}
              onChange={handleChange}
              rows={4}
              className="w-full p-3 border border-gray-300 rounded"
            />
            {errors.deskripsi && (
              <p className="text-red-500 text-sm mt-1">{errors.deskripsi}</p>
            )}
          </div>
          
          <div className="flex space-x-4">
            <button
              type="submit"
              disabled={submitting}
              className={`bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded ${
                submitting ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              {submitting ? 'Saving...' : isEdit ? 'Update Category' : 'Create Category'}
            </button>
            
            <button
              type="button"
              onClick={() => navigate('/admin/kategori')}
              className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CategoryFormPage;

// --- ./src\pages\auth\CategoryListPage.jsx ---
// src/pages/CategoryListPage.jsx
import { useEffect, useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { kategoriApi } from '../../api/kategoriApi';
import { toast } from 'react-toastify';

const CategoryListPage = () => {
  const [categories, setCategories] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const data = await kategoriApi.getAll();
        setCategories(data);
      } catch (error) {
        toast.error('Failed to load categories');
      }
    };
    fetchCategories();
  }, []);

  const handleDelete = async (id) => {
    try {
      await kategoriApi.delete(id);
      setCategories(categories.filter(cat => cat.id !== id));
      toast.success('Category deleted');
    } catch (error) {
      toast.error('Delete failed');
    }
  };

  return (
    <div className="container mx-auto p-8">
      <h1 className="text-2xl font-bold mb-6">Manage Categories</h1>
      <button 
        type="button"
        onClick={() => navigate('/admin/kategori/new')}
        className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded mb-4"
      >
        Create New Category
      </button>
      <table className="w-full text-left border-collapse">
        <thead>
          <tr className="bg-gray-100">
            <th className="px-4 py-3">Name</th>
            <th className="px-4 py-3">Actions</th>
          </tr>
        </thead>
        <tbody>
          {categories.map(category => (
            <tr key={category.id} className="border-b ">
                <td className="px-4 py-3">
                {/* Use Link instead of <a> for proper routing */}
                <Link 
                    to={`/admin/kategori/${category.id}/edit`} 
                    className="text-blue-600 hover:underline"
                >
                    {category.nama}
                </Link>
                </td>
              <td className="px-4 py-3">
                <button 
                  onClick={() => handleDelete(category.id)}
                  className="text-red-600 hover:underline"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CategoryListPage;

// --- ./src\store\authSlice.js ---
// src/store/authSlice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  isAuthenticated: false,
  user: null,
  token: null,
  loading: false,
  error: null
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    loginRequest: (state) => {
      state.loading = true;
      state.error = null;
    },
    loginSuccess: (state, action) => {
      state.isAuthenticated = true;
      state.user = action.payload.user; // ✅ Should be set by backend response
      state.loading = false;
      state.error = null;
    },
    loginFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    logout: (state) => {
      state.isAuthenticated = false;
      state.user = null;
      state.token = null;
    }
  }
});
export const { loginRequest, loginSuccess, loginFailure, logout } = authSlice.actions;
export default authSlice.reducer;

// --- ./src\store\index.js ---
// src/store/index.js
import { configureStore } from '@reduxjs/toolkit';
import authReducer from './authSlice';

const store = configureStore({
  reducer: {
    auth: authReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: false,
    }),
});

export default store;

// --- ./src\utils\fieldsErrors.js ---
export default function FieldError({ name, errors }) {
  if (!errors[name]) return null;
  
  return (
    <span className="text-red-500 text-sm">
      {errors[name]}
    </span>
  );
};

// --- ./src\utils\validation.js ---
export const validateArticle = (data) => {
  const errors = {};
  
  if (!data.judul) errors.judul = 'Title is required';
  if (data.judul.length < 2) errors.judul = 'Title must be at least 2 characters';
  
  if (!data.konten) errors.konten = 'Content is required';
  if (data.konten.length < 100) errors.konten = 'Content must be at least 100 characters';
  
  if (!data.kategori_id) errors.kategori_id = 'Category is required';
  
  return errors;
};

